/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'

}


repositories {
    mavenCentral()
}


dependencies {
  implementation 'org.seleniumhq.selenium:selenium-server:3.141.0'
  implementation 'org.testng:testng:6.13.1'
  implementation 'io.github.bonigarcia:webdrivermanager:4.0.0'
  implementation 'log4j:log4j:1.2.17'
    
//  implementation fileTree(dir: '../libs/reportportal-logback/',
 //                          include: ['*.jar'])
//  compile fileTree(dir: '../libs/reportportal-logback/',
  //                         include: ['*.jar'])

  //implementation fileTree(dir: '../libs/logback/',
  //                         include: ['*.jar'])
  //compile fileTree(dir: '../libs/logback/',
  //                         include: ['*.jar'])

  // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
  compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
  
  // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
  compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'


  //implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.0'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.11.0'

  //implementation group: 'org.apache.tika', name: 'tika-core', version: '1.13'
  compile group: 'org.apache.tika', name: 'tika-core', version: '1.13'

  

  // Intercept System.out and send over as log4j
  // https://mvnrepository.com/artifact/uk.org.lidalia/sysout-over-slf4j
  compile group: 'uk.org.lidalia', name: 'sysout-over-slf4j', version: '1.0.2'
  
  // https://mvnrepository.com/artifact/org.slf4j/log4j-over-slf4j
  compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'


}

group = 'ReactBank'
version = '0.1-SNAPSHOT'

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

shadowJar {
    zip64 true
    mergeServiceFiles()
}


//THIS WORKS
task fatJar(type: Jar) {
    manifest {
        attributes 'Manifest-Version': '1.0', 'Implementation-Title': 'xyz', 'Implementation-Version': version, 'Main-Class': 'ClientMain', 'SplashScreen-Image': 'splashScreen.png'
    }
    archiveClassifier = "all"
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
  with jar
}


// THIS ALSO WORKS
task testJar(type: Jar) {
    manifest {
        attributes 'Manifest-Version': '1.0', 'Implementation-Title': 'xyz', 'Implementation-Version': version, 'Main-Class': 'TestMain', 'SplashScreen-Image': 'splashScreenTest.png'
    }
    //classifier = 'tests'
    baseName = project.name + '-test'
    from sourceSets.test.output+sourceSets.test.allSource
}

// Generates a Jar but with test classes and resources
task fatTestJar(type: Jar) {
    //dependsOn testJar, fatJar
    manifest {
        attributes 'Manifest-Version': '0.1', 'Implementation-Title': 'xyz', 'Implementation-Version': version, 'Main-Class': 'org.testng.TestNG', 'SplashScreen-Image': 'splashScreenTest.png'
    }
    baseName = project.name + '-test-all'
//        archiveClassifier = "all"
    from {
       configurations.compile.collect { it.isDirectory() ? it : zipTree(it); exclude 'reportportal.properties', 'META-INF', 'META-INF/**'}
       configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it)}
//       exclude '**/reportportal.properties'
    }
   
    from configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) }

    from sourceSets.test.output

    //from('interceptor_configs') {
    //    include '*.*'
    //}
    from ('.') {
        include "testng.xml"
        include "testng-demo.xml"
        include "testng-full.xml"
    }

    with jar
}

test {
    useTestNG()
}
